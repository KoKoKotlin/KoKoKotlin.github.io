{"version":3,"sources":["TftItem.js","App.js","serviceWorker.js","index.js"],"names":["TftItemHeader","item","this","props","className","name","comps","map","comp","key","carries","carry","alt","src","refs","React","Component","TftContentItems","items","itemContent","index","champ","itemRef","TftContentList","heading","lines","line","ReactHtmlParser","TftItem","id","onClick","window","open","boardUrl","requirements","playstyle","TftLink","offset","console","log","activeClass","to","smooth","TftLinks","data","numberOfRows","length","rows","i","row","j","push","e","createDom","TftItemContainer","entries","links","state","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5d6df9f4.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link, Element } from \"react-scroll\";\n\nimport data from \"./data/tft.json\";\nimport \"./App.css\";\n\nimport ReactHtmlParser from \"react-html-parser\";\n\nclass TftItemHeader extends React.Component {\n    render() {\n        const item = this.props.item;\n        return(\n            <div className=\"tftheader\">\n                <span className=\"tftitemname\"><strong>{item.name}</strong></span>\n                <div className=\"tftcompcontainer\">{item.comps.map(comp => <div key={comp} className=\"tftcomp\">{comp}</div>)}</div>\n                <div>\n                    {item.carries.map(carry => {\n                        return (\n                            <img className=\"tftcarrypic\" alt=\"\" src={this.props.refs[carry]} />\n                        );\n                    })}   \n                </div>\n            </div>\n        );\n    }\n}\n\nclass TftContentItems extends React.Component {\n    render() {\n        const item = this.props.item;\n        return(\n            <div className=\"tftleftcontent\">\n                {item.items.map((itemContent, index) => {\n                    return (<div key={itemContent + index} className=\"tftitemcontainer\">\n                        <img alt=\"\" className=\"tftitemchamp\" src={this.props.refs[itemContent.champ]} />\n                        {itemContent.items.map((itemRef, index) => {\n                            return(\n                                <img key={itemRef + index} alt=\"\" className=\"tftitemitem\" src={this.props.refs[itemRef]}/>\n                            );\n                        })}\n                    </div>);\n                })}\n            </div>\n        );\n    }\n}\n\nclass TftContentList extends React.Component {\n    render() {\n        return(\n            <div>\n                <h3 className=\"tftrightheading\">{this.props.heading}:</h3>\n                <ul className=\"tftrightcontent--ul\">\n                    {this.props.lines.map(line => {\n                        return(\n                            <li key={line}>\n                                {ReactHtmlParser(line)}\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n        );\n    }\n}\n\nclass TftItem extends React.Component {\n    render() {\n        const item = this.props.item;\n\n        return (\n            <div>\n                <Element name={item.id}></Element>\n                <div  className=\"tftitem\" onClick={() => window.open(item.boardUrl, \"_blank\")}>\n                    <TftItemHeader item={item} refs={this.props.refs} />\n                    <div className=\"tftcontent\">\n                        <TftContentItems item={item} refs={this.props.refs} />\n                        <span className=\"tftcontentseperator tftcontentseperator--vertical\"></span>\n                        <div className=\"tftrightcontent\">\n                            <TftContentList lines={item.requirements} heading={\"Requirements\"} />\n                            <div className=\"tftcontentseperator tftcontentseperator--horizontal\"></div>\n                            <TftContentList lines={item.playstyle} heading={\"Playstyle\"} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass TftLink extends React.Component {\n    render() {\n        const offset = this.props.index * 260 + 170;\n        console.log(offset)\n        return(\n            <th className=\"linkstableitem\">\n                <Link className=\"linksinlinelink\" activeClass=\"active\" to={this.props.id} smooth={true} offset={offset}>{this.props.name}</Link>\n            </th>\n        );\n    }\n}\n\nclass TftLinks extends React.Component {\n    \n    createDom() {\n        const items = data.data;\n        const linksPerRow = 3;\n        const numberOfRows = items.length / linksPerRow;\n        \n        const rows = [];\n        for(let i = 0; i < numberOfRows; i++) {\n            const row = [];\n            for(let j = 0; j < linksPerRow; j++) try { row.push(\n                <TftLink index={i * 3 + j} id={items[i * linksPerRow + j].id} name={items[i * linksPerRow + j].name}/>\n            ); } catch(e) { } \n            rows.push(<tr>{row}</tr>);    \n        }\n\n        return rows;\n    }\n\n    render() {\n        return(\n            <div className=\"tftlinkcontainer\">\n                <table className=\"linkstable\">\n                    <tbody className=\"linkstablebody\">\n                        {this.createDom()}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nclass TftItemContainer extends React.Component {\n    constructor() {\n        super();\n        \n        const entries = data.data.map((item, index) => {\n            return <TftItem key={index} item={item} refs={data.refs} />;\n        });\n        \n        const links = <TftLinks />\n\n        this.state = {\n            entries,\n            links\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.links}\n                {this.state.entries}\n            </div>\n        );\n    }\n}\n\nexport default TftItemContainer;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport TftItemContainer from \"./TftItem.js\";\n\nfunction App() {\n    return (\n    <div>\n      <TftItemContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}